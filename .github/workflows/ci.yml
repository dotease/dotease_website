name: Continuous Integration Test
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup dependencies
    runs-on: Ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: npm install -g pnpm @antfu/ni

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm i

      - name: Cache Prisma
        id: cache-prisma
        uses: actions/cache@v3
        with:
          path: ./
          key: ${{ hashFiles('prisma/schema.prisma') }}-prisma

      - name: Generate Prisma
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: pnpm prisma generate

  validate-code:
    needs: setup
    name: Validate Code
    runs-on: Ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: npm install -g pnpm @antfu/ni

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Restore Prisma
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ hashFiles('prisma/schema.prisma') }}-prisma

      - name: verify code
        run: pnpm run lint

  unit-tests:
    needs: setup
    name: Unit tests
    runs-on: Ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-dep: 0

      - run: npm install -g pnpm @antfu/ni

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Restore Prisma
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ hashFiles('prisma/schema.prisma') }}-prisma

      - name: Run unit tests
        run: pnpm run test

  build:
    needs: [validate-code, unit-tests]
    name: Build test
    runs-on: Ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: npm install -g pnpm @antfu/ni

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Restore Prisma
        uses: actions/cache/restore@v3
        with:
          path: ./
          key: ${{ hashFiles('prisma/schema.prisma') }}-prisma

      - name: build app
        run: pnpm run build
        env: [
          ${{ env.DATABASE_URL }},
          ${{ env.NEXTAUTH_URL }},
          ${{ env.NEXTAUTH_SECRET }}
          ${{ env.DISCORD_CLIENT_ID }},
          ${{ env.DISCORD_CLIENT_SECRET }}
        ]

  push-docker-image:
    needs: build
    name: Push image on DockerHub
    runs-on: Ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Create image meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: dotease/dotease_website
          tags: |
            type=ref, event=pr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: [
            database_url=${{ env.DATABASE_URL }},
            next_auth_url=${{ NEXTAUTH_URL }},
            next_auth_secret=${{ env.NEXTAUTH_SECRET }},
            discord_client_id=${{ env.DISCORD_CLIENT_ID }},
            discord_client_secret=${{ env.DISCORD_CLIENT_SECRET }}
          ]